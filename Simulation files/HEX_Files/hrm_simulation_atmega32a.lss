
hrm_simulation_atmega32a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007c  0080007c  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bfb  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c8  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000535  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000048c  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_pulseEnable>:
char hr_buffer[MAX_HR_LEN];
uint8_t idx = 0;

// ---------- LCD Functions ----------
void LCD_pulseEnable() {
	PORTA |= (1 << LCD_EN);
  92:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_pulseEnable+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <LCD_pulseEnable+0xa>
	_delay_us(1);
	PORTA &= ~(1 << LCD_EN);
  9c:	da 98       	cbi	0x1b, 2	; 27
  9e:	87 ec       	ldi	r24, 0xC7	; 199
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_pulseEnable+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_pulseEnable+0x16>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_nibble>:
	_delay_us(100);
}

void LCD_nibble(unsigned char nibble) {
	PORTA &= 0x87; // Clear D4-D7 (PA3–PA6)
  ac:	9b b3       	in	r25, 0x1b	; 27
  ae:	97 78       	andi	r25, 0x87	; 135
  b0:	9b bb       	out	0x1b, r25	; 27
	if (nibble & 0x01) PORTA |= (1 << LCD_D4);
  b2:	80 fd       	sbrc	r24, 0
  b4:	db 9a       	sbi	0x1b, 3	; 27
	if (nibble & 0x02) PORTA |= (1 << LCD_D5);
  b6:	81 fd       	sbrc	r24, 1
  b8:	dc 9a       	sbi	0x1b, 4	; 27
	if (nibble & 0x04) PORTA |= (1 << LCD_D6);
  ba:	82 fd       	sbrc	r24, 2
  bc:	dd 9a       	sbi	0x1b, 5	; 27
	if (nibble & 0x08) PORTA |= (1 << LCD_D7);
  be:	83 fd       	sbrc	r24, 3
  c0:	de 9a       	sbi	0x1b, 6	; 27
	LCD_pulseEnable();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_pulseEnable>
  c6:	08 95       	ret

000000c8 <LCD_cmd>:
}

void LCD_cmd(unsigned char cmd) {
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
	PORTA &= ~(1 << LCD_RS); // RS = 0
  cc:	d8 98       	cbi	0x1b, 0	; 27
	PORTA &= ~(1 << LCD_RW); // RW = 0
  ce:	d9 98       	cbi	0x1b, 1	; 27
	LCD_nibble(cmd >> 4);
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	0e 94 56 00 	call	0xac	; 0xac <LCD_nibble>
	LCD_nibble(cmd & 0x0F);
  d8:	8c 2f       	mov	r24, r28
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 56 00 	call	0xac	; 0xac <LCD_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_cmd+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_cmd+0x22>
  ea:	00 00       	nop
	_delay_ms(2);
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <LCD_data>:

void LCD_data(unsigned char data) {
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
	PORTA |= (1 << LCD_RS);  // RS = 1
  f4:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA &= ~(1 << LCD_RW); // RW = 0
  f6:	d9 98       	cbi	0x1b, 1	; 27
	LCD_nibble(data >> 4);
  f8:	82 95       	swap	r24
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	0e 94 56 00 	call	0xac	; 0xac <LCD_nibble>
	LCD_nibble(data & 0x0F);
 100:	8c 2f       	mov	r24, r28
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	0e 94 56 00 	call	0xac	; 0xac <LCD_nibble>
 108:	8f e9       	ldi	r24, 0x9F	; 159
 10a:	9f e0       	ldi	r25, 0x0F	; 15
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_data+0x1c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_data+0x22>
 112:	00 00       	nop
	_delay_ms(2);
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <LCD_init>:
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9c e9       	ldi	r25, 0x9C	; 156
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_init+0x4>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_init+0xa>
 122:	00 00       	nop

void LCD_init() {
	_delay_ms(20);
	LCD_cmd(0x02); // 4-bit mode
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
	LCD_cmd(0x28); // 2-line, 5x7 font
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
	LCD_cmd(0x0C); // Display ON, cursor OFF
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
	LCD_cmd(0x06); // Entry mode
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
	LCD_cmd(0x01); // Clear display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_init+0x2e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_init+0x34>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear() {
	LCD_cmd(0x01);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
 156:	08 95       	ret

00000158 <LCD_setCursor>:
}

void LCD_setCursor(uint8_t row, uint8_t col) {
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <LCD_setCursor+0x6>
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
	uint8_t pos[] = {0x80, 0xC0};
 162:	90 e8       	ldi	r25, 0x80	; 128
 164:	99 83       	std	Y+1, r25	; 0x01
 166:	90 ec       	ldi	r25, 0xC0	; 192
 168:	9a 83       	std	Y+2, r25	; 0x02
	LCD_cmd(pos[row] + col);
 16a:	fe 01       	movw	r30, r28
 16c:	e8 0f       	add	r30, r24
 16e:	f1 1d       	adc	r31, r1
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	86 0f       	add	r24, r22
 174:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_cmd>
}
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <LCD_print>:

void LCD_print(char *str) {
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	while (*str) {
 188:	88 81       	ld	r24, Y
 18a:	88 23       	and	r24, r24
 18c:	31 f0       	breq	.+12     	; 0x19a <LCD_print+0x18>
 18e:	21 96       	adiw	r28, 0x01	; 1
		LCD_data(*str++);
 190:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_data>
	uint8_t pos[] = {0x80, 0xC0};
	LCD_cmd(pos[row] + col);
}

void LCD_print(char *str) {
	while (*str) {
 194:	89 91       	ld	r24, Y+
 196:	81 11       	cpse	r24, r1
 198:	fb cf       	rjmp	.-10     	; 0x190 <LCD_print+0xe>
		LCD_data(*str++);
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <USART_init>:

// ---------- USART Functions ----------
void USART_init(unsigned int ubrr) {
	UCSRB = (1 << RXEN);     // Enable receiver
 1a0:	20 e1       	ldi	r18, 0x10	; 16
 1a2:	2a b9       	out	0x0a, r18	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); // 8-bit
 1a4:	26 e8       	ldi	r18, 0x86	; 134
 1a6:	20 bd       	out	0x20, r18	; 32
	UBRRL = ubrr;
 1a8:	89 b9       	out	0x09, r24	; 9
	UBRRH = (ubrr >> 8);
 1aa:	90 bd       	out	0x20, r25	; 32
 1ac:	08 95       	ret

000001ae <USART_receive_char>:
}

unsigned char USART_receive_char() {
	while (!(UCSRA & (1 << RXC)));
 1ae:	5f 9b       	sbis	0x0b, 7	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <USART_receive_char>
	return UDR;
 1b2:	8c b1       	in	r24, 0x0c	; 12
}
 1b4:	08 95       	ret

000001b6 <USART_receive_string>:

void USART_receive_string(char* buffer, uint8_t max_len) {
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	7c 01       	movw	r14, r24
	char ch;
	uint8_t i = 0;
 1c6:	d1 2c       	mov	r13, r1
		ch = USART_receive_char();
		if (ch == '\r' || ch == '\n') {
			buffer[i] = '\0';
			break;
		}
		if (i < max_len - 1) {
 1c8:	c6 2f       	mov	r28, r22
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	21 97       	sbiw	r28, 0x01	; 1
 1ce:	0d 2d       	mov	r16, r13
 1d0:	10 e0       	ldi	r17, 0x00	; 0
void USART_receive_string(char* buffer, uint8_t max_len) {
	char ch;
	uint8_t i = 0;

	while (1) {
		ch = USART_receive_char();
 1d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_receive_char>
		if (ch == '\r' || ch == '\n') {
 1d6:	8d 30       	cpi	r24, 0x0D	; 13
 1d8:	11 f0       	breq	.+4      	; 0x1de <USART_receive_string+0x28>
 1da:	8a 30       	cpi	r24, 0x0A	; 10
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <USART_receive_string+0x32>
			buffer[i] = '\0';
 1de:	f7 01       	movw	r30, r14
 1e0:	ed 0d       	add	r30, r13
 1e2:	f1 1d       	adc	r31, r1
 1e4:	10 82       	st	Z, r1
		}
		if (i < max_len - 1) {
			buffer[i++] = ch;
		}
	}
}
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <USART_receive_string+0x44>
		ch = USART_receive_char();
		if (ch == '\r' || ch == '\n') {
			buffer[i] = '\0';
			break;
		}
		if (i < max_len - 1) {
 1e8:	0c 17       	cp	r16, r28
 1ea:	1d 07       	cpc	r17, r29
 1ec:	94 f7       	brge	.-28     	; 0x1d2 <USART_receive_string+0x1c>
			buffer[i++] = ch;
 1ee:	f7 01       	movw	r30, r14
 1f0:	ed 0d       	add	r30, r13
 1f2:	f1 1d       	adc	r31, r1
 1f4:	80 83       	st	Z, r24
 1f6:	d3 94       	inc	r13
 1f8:	ea cf       	rjmp	.-44     	; 0x1ce <USART_receive_string+0x18>
		}
	}
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	08 95       	ret

0000020a <LED_display>:

// ---------- LED Function ----------
void LED_display(uint8_t hr) {
	PORTC = 0x00;
 20a:	15 ba       	out	0x15, r1	; 21
	if (hr < 65 || hr > 120) {
 20c:	9f eb       	ldi	r25, 0xBF	; 191
 20e:	98 0f       	add	r25, r24
 210:	98 33       	cpi	r25, 0x38	; 56
 212:	10 f0       	brcs	.+4      	; 0x218 <LED_display+0xe>
		PORTC |= (1 << PC0); // RED
 214:	a8 9a       	sbi	0x15, 0	; 21
 216:	08 95       	ret
		} else if (hr > 90 && hr <= 120) {
 218:	8b 55       	subi	r24, 0x5B	; 91
 21a:	8e 31       	cpi	r24, 0x1E	; 30
 21c:	10 f4       	brcc	.+4      	; 0x222 <LED_display+0x18>
		PORTC |= (1 << PC1); // YELLOW
 21e:	a9 9a       	sbi	0x15, 1	; 21
 220:	08 95       	ret
		} else if (hr >= 65 && hr <= 90) {
 222:	9a 31       	cpi	r25, 0x1A	; 26
 224:	08 f4       	brcc	.+2      	; 0x228 <LED_display+0x1e>
		PORTC |= (1 << PC2); // GREEN
 226:	aa 9a       	sbi	0x15, 2	; 21
 228:	08 95       	ret

0000022a <main>:
	}
}

// ---------- Main ----------
int main(void) {
	DDRA = 0xFF; // LCD (output)
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // LEDs (output)
 22e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 230:	15 ba       	out	0x15, r1	; 21

	LCD_init();
 232:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_init>
	USART_init(51); // 9600 baud at 8 MHz
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <USART_init>

	LCD_setCursor(0, 0);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_setCursor>
	LCD_print("Waiting HR");
 246:	80 e6       	ldi	r24, 0x60	; 96
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_print>

	while (1) {
		USART_receive_string(hr_buffer, MAX_HR_LEN);
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	8c e7       	ldi	r24, 0x7C	; 124
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_receive_string>
		uint8_t hr = atoi(hr_buffer);
 258:	8c e7       	ldi	r24, 0x7C	; 124
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 4b 01 	call	0x296	; 0x296 <atoi>
 260:	c8 2f       	mov	r28, r24

		LCD_clear();
 262:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_clear>
		LCD_setCursor(0, 0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_setCursor>
		LCD_print("Heart Rate:");
 26e:	8b e6       	ldi	r24, 0x6B	; 107
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_print>
		LCD_setCursor(1, 0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_setCursor>
		LCD_print(hr_buffer);
 27e:	8c e7       	ldi	r24, 0x7C	; 124
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_print>
		LCD_print(" BPM");
 286:	87 e7       	ldi	r24, 0x77	; 119
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_print>

		LED_display(hr);
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 05 01 	call	0x20a	; 0x20a <LED_display>
 294:	dc cf       	rjmp	.-72     	; 0x24e <main+0x24>

00000296 <atoi>:
 296:	fc 01       	movw	r30, r24
 298:	88 27       	eor	r24, r24
 29a:	99 27       	eor	r25, r25
 29c:	e8 94       	clt
 29e:	21 91       	ld	r18, Z+
 2a0:	20 32       	cpi	r18, 0x20	; 32
 2a2:	e9 f3       	breq	.-6      	; 0x29e <atoi+0x8>
 2a4:	29 30       	cpi	r18, 0x09	; 9
 2a6:	10 f0       	brcs	.+4      	; 0x2ac <atoi+0x16>
 2a8:	2e 30       	cpi	r18, 0x0E	; 14
 2aa:	c8 f3       	brcs	.-14     	; 0x29e <atoi+0x8>
 2ac:	2b 32       	cpi	r18, 0x2B	; 43
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <atoi+0x2a>
 2b0:	2d 32       	cpi	r18, 0x2D	; 45
 2b2:	39 f4       	brne	.+14     	; 0x2c2 <atoi+0x2c>
 2b4:	68 94       	set
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <atoi+0x2a>
 2b8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__mulhi_const_10>
 2bc:	82 0f       	add	r24, r18
 2be:	91 1d       	adc	r25, r1
 2c0:	21 91       	ld	r18, Z+
 2c2:	20 53       	subi	r18, 0x30	; 48
 2c4:	2a 30       	cpi	r18, 0x0A	; 10
 2c6:	c0 f3       	brcs	.-16     	; 0x2b8 <atoi+0x22>
 2c8:	1e f4       	brtc	.+6      	; 0x2d0 <atoi+0x3a>
 2ca:	90 95       	com	r25
 2cc:	81 95       	neg	r24
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	08 95       	ret

000002d2 <__mulhi_const_10>:
 2d2:	7a e0       	ldi	r23, 0x0A	; 10
 2d4:	97 9f       	mul	r25, r23
 2d6:	90 2d       	mov	r25, r0
 2d8:	87 9f       	mul	r24, r23
 2da:	80 2d       	mov	r24, r0
 2dc:	91 0d       	add	r25, r1
 2de:	11 24       	eor	r1, r1
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
